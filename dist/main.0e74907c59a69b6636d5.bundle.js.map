{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/state/actionHelpers.ts","webpack:///./src/state/galleries/actionTypes.ts","webpack:///./src/_common/LoadingPage.tsx","webpack:///./src/pages/images/index.tsx","webpack:///./src/pages/App.tsx","webpack:///./src/state/images/reducer.ts","webpack:///./src/state/users/actionTypes.ts","webpack:///./src/state/galleries/reducer.ts","webpack:///./src/state/users/reducer.ts","webpack:///./src/state/rootReducer.ts","webpack:///./src/state/images/schemas.ts","webpack:///./src/utils/errorUnlessOk.ts","webpack:///./src/state/images/adapters.ts","webpack:///./src/state/images/service.ts","webpack:///./src/state/images/epics.ts","webpack:///./src/state/users/actions.ts","webpack:///./src/state/users/schemas.ts","webpack:///./src/state/users/adapters.ts","webpack:///./src/state/users/service.ts","webpack:///./src/state/users/epics.ts","webpack:///./src/state/galleries/actions.ts","webpack:///./src/state/galleries/schemas.ts","webpack:///./src/state/galleries/adapters.ts","webpack:///./src/state/galleries/service.ts","webpack:///./src/state/rootEpic.ts","webpack:///./src/state/galleries/epics.ts","webpack:///./src/state/store.ts","webpack:///./src/i18n.ts","webpack:///./src/i18nResources/en.ts","webpack:///./src/index.tsx","webpack:///./src/state/images/actionTypes.ts","webpack:///./src/utils/fetcher.ts","webpack:///./src/state/images/actions.ts","webpack:///./src/utils/env.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","2","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","h","cn","jsonpArray","window","oldJsonpFunction","slice","createAction","payload","__webpack_exports__","ActionTypes","_common_LoadingPage","react_default","a","id","pages_images","lib_default","loader","then","loading","pages_App","className","react_router","path","component","to","reducer","state","action","actionTypes","fetchImagesSuccess","__assign","images","actionTypes_ActionTypes","galleries_actionTypes","galleries_reducer","fetchGallerySuccess","reducer_assign","galleries","users_actionTypes","users_reducer","fetchUserSuccess","users_reducer_assign","user","rootReducer","redux","users","imageSchema","normalizr_es","Entity","idAttribute","imageListSchema","throwErrorUnlessOk","response","ok","json","catch","fromImageApi","apiImage","title","description","created","datetime","width","height","views","nsfw","link","mp4","gifv","hls","fetchSubredditImages","subreddit","fetcher","mocks","apiJobs","adaptedImageArray","map","normalized","get_default","epics","action$","pipe","operators","fetchImages","switchMap","_a","from","mergeMap","res","of","actions","catchError","fetchImagesFailure","Actions","fetchUser","actionHelpers","fetchUserFailure","userSchema","userListSchema","fromUserApi","apiUser","url","bio","avatar","adaptedNotificationArray","users_epics","actions_Actions","fetchGallery","fetchGalleryFailure","gallerySchema","galleriesListSchema","fromGalleryApi","apiGallery","cover","isAlbum","is_album","section","imagesCount","images_count","img","adaptedGalleryArray","rootEpic","epicMiddleware","createEpicMiddleware","store","run","combineEpics","store_spread","state_store","i18next","use","dist_es","init","resources","en","heading","fallbackLng","defaultNS","debug","interpolation","escapeValue","react","wait","react_dom_default","render","es","react_router_dom","getElementById","process","path__WEBPACK_IMPORTED_MODULE_0__","path__WEBPACK_IMPORTED_MODULE_0___default","_env__WEBPACK_IMPORTED_MODULE_1__","mockFetcher","importFn","mockFn","mockResp","meta","status","statusText","headers","Headers","endpoint","importMock","_b","_c","method","body","query","apiTarget","useMocks","join","keys","reduce","queryString","buildQuery","fetch","JSON","stringify","Authorization","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","_state_actionHelpers__WEBPACK_IMPORTED_MODULE_1__","nodeEnv"],"mappings":"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","file":"main.0e74907c59a69b6636d5.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"2\":\"mocks\"}[chunkId]||chunkId) + \".\" + \"0e74907c59a69b6636d5\" + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \t// __webpack_hash__\n \t__webpack_require__.h = \"0e74907c59a69b6636d5\";\n\n \t// __webpack_chunkname__\n \t__webpack_require__.cn = \"main\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([176,0,6,5,4,3,7]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Action, ActionCreatorsMapObject } from 'redux';\n\nexport interface ActionWithPayload<T, P> extends Action<T> {\n  payload: P;\n}\n// Overload the createAction function types\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(type: T, payload?: P): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === undefined ? {type} : {type, payload};\n}\n\n/**\n * `A` is an object with a bunch of key: createAction() in it.\n *  Type ActionsUnion is all of the return types for each of those createActions (SimpleAction, ActionWithPayload)\n */\nexport type ActionsUnion< A extends ActionCreatorsMapObject> = ReturnType<A[keyof A]>;\n","export enum ActionTypes {\n    fetchGallery = 'galleries.fetch.request',\n    fetchGallerySuccess = 'galleries.fetch.success',\n    fetchGalleryFailure = 'galleries.fetch.failure',\n}\n\nexport default ActionTypes;","import React from 'react';\n\nconst LoadingPage = () => (\n  <div id=\"loading-page\">\n    Loading...\n  </div>\n);\n\nexport default LoadingPage;\n","import Loadable from 'react-loadable';\nimport LoadingPage from '../../_common/LoadingPage';\n\nexport default Loadable({\n  loader: () => import('./page'),\n  loading: LoadingPage,\n});\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport Images from './images';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"main-container\" >\n        <Route path=\"/images\" component={Images} />\n        <Redirect path=\"/\" to=\"/images\" />\n      </div>\n  );\n}\n\nexport default App;\n","import ActionTypes from './actionTypes';\nimport * as Images from './actions';\n\nconst images = (state: ImagesMap = {}, action: Images.Actions) => {\n  switch (action.type) {\n    case ActionTypes.fetchImagesSuccess:\n      return { ...state, ...action.payload.images};\n    default:\n      return state;\n  }\n};\n\nexport default images;\n","export enum ActionTypes {\n    fetchUser = 'users.fetch.request',\n    fetchUserSuccess = 'users.fetch.success',\n    fetchUserFailure = 'users.fetch.failure',\n}\n\nexport default ActionTypes;","import ActionTypes from './actionTypes';\nimport * as Galleries from './actions';\n\nconst galleries = (state: GalleriesMap = {}, action: Galleries.Actions) => {\n  switch (action.type) {\n    case ActionTypes.fetchGallerySuccess:\n      return { ...state, ...action.payload.galleries};\n    default:\n      return state;\n  }\n};\n\nexport default galleries;\n","import ActionTypes from './actionTypes';\nimport * as Users from './actions';\n\nconst users = (state: UsersMap = {}, action: Users.Actions) => {\n  switch (action.type) {\n    case ActionTypes.fetchUserSuccess:\n      return { ...state, ...action.payload.user};\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","/* eslint-disable import/prefer-default-export */\nimport { combineReducers } from 'redux';\n\nimport { default as images } from './images/reducer';\nimport { default as galleries } from './galleries/reducer';\nimport { default as users } from './users/reducer';\n\nexport default combineReducers<RootState>({\n    images,\n    galleries,\n    users\n});\n","import { normalize, schema } from 'normalizr';\nimport get from 'lodash/get';\n\nconst imageSchema = new schema.Entity(\n  'images',\n  {},\n  { idAttribute: 'id' },\n);\nconst imageListSchema = [imageSchema];\n\nexport const toNormalized = (adaptedImage: Image) => {\n  const normalized = normalize(adaptedImage, imageSchema);\n  return get(normalized, 'entities.images', {});\n};\n\nexport const toNormalizedList = (adaptedImageArray: Image[]) => {\n  const normalized = normalize(adaptedImageArray, imageListSchema);\n  return get(normalized, 'entities.images', {});\n};\n","export const throwErrorUnlessOk = (response: Response): Promise<any> => {\n    if (!(response && response.ok)) {\n        return Promise.reject(response);\n      }\n    \n      // resp may not contain any json body and if so, just return the resp\n      return response.json().catch(() => new Promise((resolve) => resolve(response)));\n  };","export const fromImageApi = (apiImage: ApiImage): Image => {\n    return {\n        id: apiImage.id,\n        title: apiImage.title,\n        description: apiImage.description,\n        created: apiImage.datetime,\n        type: apiImage.type,\n        width: apiImage.width,\n        height: apiImage.height,\n        views: apiImage.views,\n        nsfw: apiImage.nsfw,\n        link: apiImage.link,\n        mp4: apiImage.mp4,\n        gifv: apiImage.gifv,\n        hls: apiImage.hls\n    }\n};\n\nexport const fromImageApiArray = (apiJobs: ApiImage[]): Image[] =>\n  apiJobs.map(fromImageApi);\n\n","import fetcher from '~/utils/fetcher';\nimport { toNormalizedList } from './schemas';\nimport { throwErrorUnlessOk } from '~/utils/errorUnlessOk';\nimport { fromImageApiArray } from './adapters';\n\nexport const fetchSubredditImages = (subreddit: string): Promise<ImagesMap> => {\n  return fetcher(\n    `gallery/r/${subreddit}`,\n    () => import(/* webpackChunkName: \"mocks\" */ '../../../_mocks/images'),\n    (mocks) => mocks.fetchSubredditImages(),\n  ).then(throwErrorUnlessOk).then((json) =>\n    toNormalizedList(\n      fromImageApiArray(json.data)\n    )\n  );\n};\n","import { ActionsObservable, ofType } from 'redux-observable';\nimport {\n  catchError,\n  flatMap,\n  switchMap,\n} from 'rxjs/operators';\nimport {from, of, Observable } from 'rxjs';\n\nimport * as Images from './actions';\nimport ActionTypes from './actionTypes';\nimport {\n  fetchSubredditImages,\n} from './service';\n\nconst fetchImagesEpic = (action$: ActionsObservable<ReturnType<typeof Images.Actions.fetchImages>>):\nObservable<\n  ReturnType<\n| typeof Images.Actions.fetchImages\n| typeof Images.Actions.fetchImagesSuccess\n| typeof Images.Actions.fetchImagesFailure\n  >\n> =>\n  action$.pipe(\n    ofType(ActionTypes.fetchImages),\n    switchMap(({ payload: { subreddit } }) =>\n      from(fetchSubredditImages(subreddit)).pipe(\n        flatMap((res) => {\n          return of(Images.Actions.fetchImagesSuccess(res));\n        }),\n        catchError((e) => of(\n          Images.Actions.fetchImagesFailure(e),\n        ))\n      )\n    )\n  );\n\nexport default [ fetchImagesEpic ];\n","import ActionTypes from './actionTypes'\nimport { createAction, ActionsUnion } from '../../state/actionHelpers';\n\nexport const Actions = {\n    fetchUser: (id: string) =>\n        createAction(ActionTypes.fetchUser, { id }),\n    fetchUserSuccess: (user: UsersMap) =>\n        createAction(ActionTypes.fetchUserSuccess, { user }),\n    fetchUserFailure: (error: string) =>\n        createAction(ActionTypes.fetchUserFailure, { error }),\n};\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport default Actions;\n","import { normalize, schema } from 'normalizr';\nimport get from 'lodash/get';\n\nconst userSchema = new schema.Entity(\n  'users',\n  {},\n  { idAttribute: 'id' },\n);\nconst userListSchema = [userSchema];\n\nexport const toNormalized = (adaptedUser: User) => {\n  const normalized = normalize(adaptedUser, userSchema);\n  return get(normalized, 'entities.users', {});\n};\n\nexport const toNormalizedList = (adaptedNotificationArray: User[]) => {\n  const normalized = normalize(adaptedNotificationArray, userListSchema);\n  return get(normalized, 'entities.users', {});\n};\n","export const fromUserApi = (apiUser: ApiUser): User => {\n    return {\n        id: apiUser.id,\n        url: apiUser.url,\n        bio: apiUser.bio,\n        avatar: apiUser.avatar,\n    }\n};\n\nexport const fromUserApiArray = (apiJobs: ApiUser[]): User[] =>\n  apiJobs.map(fromUserApi);\n\n","import fetcher from '~/utils/fetcher';\nimport { toNormalizedList } from './schemas';\nimport { throwErrorUnlessOk } from '~/utils/errorUnlessOk';\nimport { fromUserApiArray } from './adapters';\n\nexport const fetchUser = (id: string): Promise<UsersMap> => {\n  return fetcher(\n    `account/${id}`,\n    () => import(/* webpackChunkName: \"mocks\" */ '../../../_mocks/users'),\n    (mocks) => mocks.fetchUser(),\n  ).then(throwErrorUnlessOk).then((json) =>\n    toNormalizedList(\n      fromUserApiArray(json.data)\n    )\n  );\n};\n","import { ActionsObservable, ofType } from 'redux-observable';\nimport {\n  catchError,\n  flatMap,\n  switchMap,\n} from 'rxjs/operators';\nimport {from, of, Observable } from 'rxjs';\n\nimport * as Users from './actions';\nimport ActionTypes from './actionTypes';\nimport {\n  fetchUser,\n} from './service';\n\nconst fetchUserEpic = (action$: ActionsObservable<ReturnType<typeof Users.Actions.fetchUser>>):\nObservable<\n  ReturnType<\n| typeof Users.Actions.fetchUser\n| typeof Users.Actions.fetchUserSuccess\n| typeof Users.Actions.fetchUserFailure\n  >\n> =>\n  action$.pipe(\n    ofType(ActionTypes.fetchUser),\n    switchMap(({ payload: { id } }) =>\n      from(fetchUser(id)).pipe(\n        flatMap((res) => {\n          return of(Users.Actions.fetchUserSuccess(res));\n        }),\n        catchError((e) => of(\n          Users.Actions.fetchUserFailure(e),\n        ))\n      )\n    )\n  );\n\nexport default [ fetchUserEpic ];\n","import ActionTypes from './actionTypes'\nimport { createAction, ActionsUnion } from '../../state/actionHelpers';\n\nexport const Actions = {\n    fetchGallery: (id: string) =>\n        createAction(ActionTypes.fetchGallery, { id }),\n    fetchGallerySuccess: (galleries: GalleriesMap) =>\n        createAction(ActionTypes.fetchGallerySuccess, { galleries }),\n    fetchGalleryFailure: (error: string) =>\n        createAction(ActionTypes.fetchGalleryFailure, { error }),\n};\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport default Actions;\n","import { normalize, schema } from 'normalizr';\nimport get from 'lodash/get';\n\nconst gallerySchema = new schema.Entity(\n  'galleries',\n  {},\n  { idAttribute: 'id' },\n);\nconst galleriesListSchema = [gallerySchema];\n\nexport const toNormalized = (adaptedGallery: Gallery) => {\n  const normalized = normalize(adaptedGallery, gallerySchema);\n  return get(normalized, 'entities.galleries', {});\n};\n\nexport const toNormalizedList = (adaptedGalleryArray: Gallery[]) => {\n  const normalized = normalize(adaptedGalleryArray, galleriesListSchema);\n  return get(normalized, 'entities.galleries', {});\n};\n","export const fromGalleryApi = (apiGallery: ApiGallery): Gallery => {\n    return {\n        id: apiGallery.id,\n        title: apiGallery.title,\n        description: apiGallery.description,\n        datetime: apiGallery.datetime,\n        cover: apiGallery.cover,\n        link: apiGallery.link,\n        isAlbum: apiGallery.is_album,\n        nsfw: apiGallery.nsfw,\n        section: apiGallery.section,\n        imagesCount: apiGallery.images_count,\n        images: apiGallery.images.map((img) => img.id)\n    }\n};\n\nexport const fromGalleryApiArray = (apiJobs: ApiGallery[]): Gallery[] =>\n  apiJobs.map(fromGalleryApi);\n\n","import fetcher from '~/utils/fetcher';\nimport { toNormalizedList } from './schemas';\nimport { throwErrorUnlessOk } from '~/utils/errorUnlessOk';\nimport { fromGalleryApiArray } from './adapters';\n\nexport const fetchGallery = (id: string): Promise<GalleriesMap> => {\n  return fetcher(\n    `gallery/album/${id}`,\n    () => import(/* webpackChunkName: \"mocks\" */ '../../../_mocks/galleries'),\n    (mocks) => mocks.fetchGallery(),\n  ).then(throwErrorUnlessOk).then((json) =>\n    toNormalizedList(\n      fromGalleryApiArray(json.data)\n    )\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport images from './images/epics';\nimport users from './users/epics';\nimport galleries from './galleries/epics';\n\nexport default [\n  ...images,\n  ...galleries,\n  ...users\n];\n","import { ActionsObservable, ofType } from 'redux-observable';\nimport {\n  catchError,\n  flatMap,\n  switchMap,\n} from 'rxjs/operators';\nimport {from, of, Observable } from 'rxjs';\n\nimport * as Galleries from './actions';\nimport ActionTypes from './actionTypes';\nimport {\n  fetchGallery,\n} from './service';\n\nconst fetchGalleryEpic = (action$: ActionsObservable<ReturnType<typeof Galleries.Actions.fetchGallery>>):\nObservable<\n  ReturnType<\n| typeof Galleries.Actions.fetchGallery\n| typeof Galleries.Actions.fetchGallerySuccess\n| typeof Galleries.Actions.fetchGalleryFailure\n  >\n> =>\n  action$.pipe(\n    ofType(ActionTypes.fetchGallery),\n    switchMap(({ payload: { id } }) =>\n      from(fetchGallery(id)).pipe(\n        flatMap((res) => {\n          return of(Galleries.Actions.fetchGallerySuccess(res));\n        }),\n        catchError((e) => of(\n          Galleries.Actions.fetchGalleryFailure(e),\n        ))\n      )\n    )\n  );\n\nexport default [ fetchGalleryEpic ];\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport { combineEpics, createEpicMiddleware, Epic } from 'redux-observable';\nimport combinedReducers from './rootReducer';\nimport epics from './rootEpic';\n// import AnalyticsMiddleware from './analyticsMiddleware';\n\nconst epicMiddleware = createEpicMiddleware();\nconst store = createStore(\n    combinedReducers,\n    {},\n    applyMiddleware.apply(null, [\n      epicMiddleware,\n      //AnalyticsMiddleware,\n    ]),\n);\n\nepicMiddleware.run(combineEpics(...epics as Array<Epic<any>>));\n\nexport default store;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport en from './i18nResources/en';\n\nconst my18n = i18n.use(initReactI18next).init({\n  resources: {\n    en,\n  },\n\n  fallbackLng: 'en',\n\n  // have a common namespace used around the full app\n  ns: ['translations'],\n  defaultNS: 'translations',\n  debug: false,\n\n  interpolation: {\n    escapeValue: false,\n  },\n\n  react: {\n    wait: true\n  }\n});\n\nexport default my18n;\n","export default {\n    images: {\n        heading: 'Subreddit Images'\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './i18n';\n\nReactDOM.render(\n<Provider store={store}>\n    <Router>\n        <App/>\n    </Router>\n</Provider>, document.getElementById('root'));","export enum ActionTypes {\n    fetchImages = 'images.fetch.request',\n    fetchImagesSuccess = 'images.fetch.success',\n    fetchImagesFailure = 'images.fetch.failure',\n}\n\nexport default ActionTypes;","import path from 'path';\nimport getApiTarget from './env';\n\nconst BASE_URL = 'api.imgur.com/3';\n\nconst getAuthToken = (): string => {\n  if (process.env.IMGUR_API_AUTH) {\n    return process.env.IMGUR_API_AUTH;\n  }\n  return '';\n};\n\nconst getClientId = (): string => {\n  if (process.env.IMGUR_CLIENT_ID) {\n    return process.env.IMGUR_CLIENT_ID;\n  }\n  return '';\n};\n\ntype Fetcher = (\n  path: string,\n  importMock: () => Promise<any>,\n  mockFn: (module: any) => any,\n  opts?: {\n    method?: 'GET' | 'PUT' | 'DELETE' | 'POST' | 'PATCH'\n    query?: QueryObj,\n    body?: any;\n\n  }\n) => Promise<any>;\n\n\nconst buildQuery = (query: QueryObj) =>\n    Object.keys(query).reduce((queryString, key) =>\n        queryString += `${queryString.length ? '&' : '?'}${key}=${query[key]}`\n    , '')\n\nconst useMocks = (endpoint: string, apiTarget: string) =>\n  (!endpoint || apiTarget === 'development' );\n  \nexport const fetcher: Fetcher = (\n  endpoint,\n  importMock,\n  mockFn,\n  { method = 'GET', body, query} = {}\n) => {\n  const apiTarget = getApiTarget();\n\n  if (useMocks(endpoint, apiTarget)) {\n    return new Promise((resolve, reject) => mockFetcher(importMock(), mockFn, resolve, reject));\n  }\n\n  const url = `https://${path.join(BASE_URL, endpoint)}${(query && buildQuery(query)) || ''}`;\n\n  return fetch(url, {\n    method,\n    body: JSON.stringify(body),\n    headers: new Headers({\n      Authorization: `Client-ID ${getClientId()}`\n    }),\n  });\n};\n\ntype MockFetcher = (\n  importFn: Promise<any>,\n  mockFn: (module: any) => any,\n  resolve: (...args: any[]) => void,\n  reject: (...args: any[]) => void,\n) => Promise<any>;\n\nexport const mockFetcher: MockFetcher = (importFn, mockFn, resolve, reject) => {\n  return importFn.then((module: any) => {\n    const mockResp = mockFn(module);\n\n    const { timeout = 500 } = mockResp.meta;\n\n    // could config to reject instead somehow if you want to test w/o internet\n    setTimeout(() => {\n      resolve({\n        ok: mockResp.meta.ok,\n        status: mockResp.meta.status || 200,\n        statusText: mockResp.statusText || '',\n        json() {\n          if (!mockResp.json) {\n            return Promise.reject(null);\n          }\n\n          // sometimes must do async stuff in the mock lib, see mock img upload\n          if (mockResp.json instanceof Promise) {\n            return mockResp.json;\n          }\n\n          return Promise.resolve(mockResp.json);\n        },\n        headers: new Headers(mockResp.headers || {}),\n      });\n    }, timeout);\n  });\n};\n\nexport default fetcher;\n","import ActionTypes from './actionTypes'\nimport { createAction, ActionsUnion } from '../../state/actionHelpers';\n\nexport const Actions = {\n    fetchImages: (subreddit: string) =>\n        createAction(ActionTypes.fetchImages, { subreddit }),\n    fetchImagesSuccess: (images: ImagesMap) =>\n        createAction(ActionTypes.fetchImagesSuccess, { images }),\n    fetchImagesFailure: (error: string) =>\n        createAction(ActionTypes.fetchImagesFailure, { error }),\n};\nexport type Actions = ActionsUnion<typeof Actions>;\n\nexport default Actions;\n","type GetApiTarget = (apiTarget?: any, nodeEnv?: string) => 'development' | 'staging' | 'production';\n\nexport const getApiTarget: GetApiTarget = (apiTarget= process.env.API_TARGET, nodeEnv= process.env.NODE_ENV) => {\n  if (!apiTarget && nodeEnv) { return nodeEnv; }\n  return apiTarget || 'production';\n};\n\nexport default getApiTarget;"],"sourceRoot":""}